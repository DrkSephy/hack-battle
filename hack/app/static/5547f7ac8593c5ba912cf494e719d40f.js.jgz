if (!window.ICE) {
    if (window.ICE_EXPORT_TO_SCOPE === undefined) {
        window.ICE_EXPORT_TO_SCOPE = window
    }
    var ICE = {
        BASE_URL: "",
        _ready_bound: false,
        _is_ready: false,
        _agent: navigator.userAgent.toLowerCase(),
        _agent_version: navigator.productSub,
        _ready_list: [],
        _f_guid: 2,
        _has_mouse: false,
        generalErrorback: null,
        generalCallback: null,
        annotateAjaxData: [],
        $isWebkit: function() {
            return ICE._agent.indexOf("webkit") != -1
        },
        $isIe: function() {
            return ICE._agent.indexOf("msie") != -1
        },
        $isEdge: function() {
            return ICE._agent.indexOf("edge/") != -1
        },
        $isIe8: function() {
            return ICE._agent.indexOf("msie 8") != -1
        },
        $isSafari: function(a) {
            if (a) {
                return ICE._agent.indexOf("khtml")
            }
            return (ICE._agent.indexOf("khtml") != -1 && ICE._agent.match(/3\.\d\.\d safari/) === null)
        },
        $isOpera: function() {
            return ICE._agent.indexOf("opera") != -1
        },
        $isMozilla: function() {
            return (ICE._agent.indexOf("gecko") != -1 && ICE._agent_version >= 20030210)
        },
        $isMac: function() {
            return (ICE._agent.indexOf("macintosh") != -1)
        },
        $isChrome: function() {
            return ICE._agent.indexOf("chrome/") != -1
        },
        $queryArgument: function(e) {
            var b = window.location.search.substring(1);
            var c = b.split("&");
            for (var a = 0; a < c.length; a++) {
                var d = c[a].split("=");
                if (d[0] == e) {
                    return d[1]
                }
            }
            return null
        },
        $isHighDensity: function() {
            return ((window.matchMedia && (window.matchMedia("only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)").matches || window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)").matches)) || (window.devicePixelRatio && window.devicePixelRatio > 1.3))
        },
        $arrayCreate: function(a) {
            if (ICE.$isArray(a) && !ICE.$isString(a)) {
                return a
            } else {
                if (!a) {
                    return []
                } else {
                    return [a]
                }
            }
        },
        $arrayCompare: function(c, b) {
            if (c.length != b.length) {
                return false
            }
            for (var a = 0; a < b.length; a++) {
                if (c[a].compareArrays) {
                    if (!c[a].compareArrays(b[a])) {
                        return false
                    } else {
                        continue
                    }
                }
                if (c[a] != b[a]) {
                    return false
                }
            }
            return true
        },
        $arrayRemove: function(d, c, b) {
            var a = ICE.$index(c, d, b);
            if (a != -1) {
                d.splice(a, 1)
            }
            return d
        },
        $arrayUpdate: function(d, c, a) {
            var b = ICE.$index(c, d);
            if (b != -1) {
                d.splice(b, 1, a)
            }
            return d
        },
        $arrayCopy: function(c) {
            var b = [];
            for (var a = 0; a < c.length; a++) {
                b.push(c[a])
            }
            return b
        },
        $arrayDiff: function(c, b) {
            if (b.length > c.length) {
                var a = c;
                c = b;
                b = a
            }
            return ICE.$filter(c, function(d) {
                return !(ICE.$index(d, b) > -1)
            })
        },
        $arrayUnion: function(c, b) {
            if (b.length > c.length) {
                var a = c;
                c = b;
                b = a
            }
            return ICE.$filter(c, function(d) {
                return ICE.$index(d, b) > -1
            })
        },
        $arrayForce: function(a) {
            if (ICE.$isArray(a)) {
                return a
            }
            var c = [];
            for (var b = 0; b < a.length; b++) {
                c.push(a[b])
            }
            return c
        },
        $arrayJoin: function(c, d) {
            try {
                return d.join(c)
            } catch (b) {
                var a = d[0] || "";
                ICE.$map(d, function(e) {
                    a += c + e
                }, 1);
                return a + ""
            }
        },
        $isIn: function(c, b) {
            var a = ICE.$index(c, b);
            if (a != -1) {
                return true
            } else {
                return false
            }
        },
        $index: function(d, c, b) {
            for (var a = 0; a < c.length; a++) {
                if (b && b(c[a]) || d == c[a]) {
                    return a
                }
            }
            return -1
        },
        $first: function(a) {
            if (a.length > 0) {
                return a[0]
            } else {
                return null
            }
        },
        $last: function(a) {
            if (a.length > 0) {
                return a[a.length - 1]
            } else {
                return null
            }
        },
        $random: function(a) {
            return a[Math.floor(Math.random() * a.length)]
        },
        $arrayFlatten: function(h) {
            h = ICE.$arrayForce(h);
            var d = true;
            ICE.$map(h, function(i) {
                if (i && ICE.$isArray(i)) {
                    d = false;
                    return true
                }
            });
            if (d) {
                return h
            }
            var f = false;
            var a = [];
            for (var b = 0; b < h.length; b++) {
                var g = h[b];
                if (ICE.$isArray(g)) {
                    f = true;
                    break
                }
                if (g !== null) {
                    a.push(g)
                }
            }
            if (!f) {
                return a
            }
            var c = [];
            var e = function(j, i) {
                ICE.$map(i, function(k) {
                    if (k === null) {} else {
                        if (ICE.$isArray(k)) {
                            e(j, k)
                        } else {
                            j.push(k)
                        }
                    }
                })
            };
            e(c, h);
            return c
        },
        $update: function(b, a) {
            for (var c in a) {
                b[c] = a[c]
            }
            return b
        },
        $map: function(g, e, b, d) {
            var c = 0,
                a = g.length;
            if (b !== undefined) {
                c = b
            }
            if (d !== undefined) {
                a = d
            }
            for (c; c < a; c++) {
                var f = e(g[c], c);
                if (f !== undefined) {
                    return f
                }
            }
        },
        $rmap: function(g, e, b, d) {
            var c = g.length - 1,
                a = 0;
            if (b !== undefined) {
                c = b
            }
            if (d !== undefined) {
                a = d
            }
            for (c; c >= a; c--) {
                var f = e.apply(null, [g[c], c]);
                if (f !== undefined) {
                    return f
                }
            }
        },
        $filter: function(e, c, a, b) {
            var d = [];
            ICE.$map(e, function(g, f) {
                if (c(g, f)) {
                    d.push(g)
                }
            }, a, b);
            return d
        },
        $partial: function(b) {
            var a = $AF(arguments);
            a.shift();
            return function() {
                var c = [];
                c = c.concat(a);
                c = c.concat($AF(arguments));
                return b.apply(this || window, c)
            }
        },
        $get: function(a) {
            if (ICE.$isString(a) || ICE.$isNumber(a)) {
                return document.getElementById(a)
            } else {
                return a
            }
        },
        $$: function(a, b) {
            if (b) {
                return ICE.$arrayForce(b.querySelectorAll(a))
            } else {
                return ICE.$arrayForce(document.querySelectorAll(a))
            }
        },
        $all: function(e, d, c, b) {
            if (!ICE.$defined(c)) {
                c = document
            }
            if (!ICE.$defined(e)) {
                e = "*"
            }
            var a;
            if (e && d) {
                a = e + "." + d
            } else {
                if (e) {
                    a = e
                } else {
                    if (d) {
                        a = "." + d
                    }
                }
            }
            class_elements = ICE.$arrayForce(c.querySelectorAll(a));
            if (b) {
                return class_elements[0]
            } else {
                return class_elements
            }
        },
        $nodeName: function(a) {
            if (!a || !a.nodeName) {
                return "undefined"
            }
            return a.nodeName.toLowerCase()
        },
        _nodeWalk: function(f, d, b, e) {
            if (!f) {
                return null
            }
            var c = e(f);
            var a;
            if (d && b) {
                a = function(g) {
                    return ICE.$nodeName(g) == d && ICE.$hasClass(g, b)
                }
            } else {
                if (d) {
                    a = function(g) {
                        return ICE.$nodeName(g) == d
                    }
                } else {
                    a = function(g) {
                        return ICE.$hasClass(g, b)
                    }
                }
            }
            if (a(f)) {
                return f
            }
            while (c) {
                if (a(c)) {
                    return c
                }
                c = e(c)
            }
            return null
        },
        $parent: function(e, d, c, a) {
            var b = ICE._parseTagClassName(d, c);
            d = b[0];
            c = b[1];
            return ICE._nodeWalk(e, d, c, function(f) {
                if (f == a) {
                    return null
                }
                if (f) {
                    return f.parentNode
                }
            })
        },
        $child: function(e, d, c) {
            var b = ICE._parseTagClassName(d, c);
            d = b[0];
            c = b[1];
            var a = ICE.$all(d, c, e);
            if (a.length > 0) {
                return a[0]
            } else {
                return null
            }
        },
        $prevSibling: function(d, c, b) {
            var a = ICE._parseTagClassName(c, b);
            c = a[0];
            b = a[1];
            return ICE._nodeWalk(d, c, b, function(e) {
                return e.previousSibling
            })
        },
        $nextSibling: function(d, c, b) {
            var a = ICE._parseTagClassName(c, b);
            c = a[0];
            b = a[1];
            return ICE._nodeWalk(d, c, b, function(e) {
                return e.nextSibling
            })
        },
        $body: function() {
            return ICE.$all("body")[0]
        },
        $head: function() {
            return ICE.$all("head")[0]
        },
        $form: function(c, a) {
            c = ICE.$(c);
            var b = null;
            ICE.$map(c.elements, function(d) {
                if (d.name && d.name == a) {
                    b = d
                }
            });
            if (b) {
                return b
            }
            ICE.$map(ICE.$all("select", null, c), function(d) {
                if (d.name && d.name == a) {
                    b = d
                }
            });
            return b
        },
        $selectValue: function(a) {
            a = ICE.$(a);
            if (!a) {
                return null
            }
            return a.options[a.selectedIndex].value
        },
        $documentInsert: function(a) {
            if (typeof(a) == "string") {
                a = ICE.$toDOM(a)
            }
            document.write('<span id="dummy_holder"></span>');
            ICE.$swap(ICE.$("dummy_holder"), a)
        },
        $toDOM: function(a, c) {
            var b = ICE.DIV();
            b.innerHTML = a;
            if (c) {
                return b.childNodes[0]
            } else {
                return b
            }
        },
        $add: function(b) {
            var a = ICE.$arrayFlatten(arguments);
            if (a.length >= 2) {
                ICE.$map(a, function(c) {
                    if (ICE.$isString(c)) {
                        c = ICE.TN(c)
                    }
                    if (ICE.$defined(b) && ICE.$defined(c)) {
                        b.appendChild(c)
                    }
                }, 1)
            }
            return b
        },
        $addToTop: function(d) {
            var b = ICE.$arrayFlatten(arguments).slice(1);
            if (b.length >= 1) {
                var c = d.firstChild;
                if (c) {
                    while (true) {
                        var a = b.shift();
                        if (a) {
                            ICE.$addBefore(a, c)
                        } else {
                            break
                        }
                    }
                } else {
                    ICE.$add.apply(null, arguments)
                }
            }
            return d
        },
        $replace: function(b) {
            var a;
            while ((a = b.firstChild)) {
                ICE.$swap(a, null)
            }
            if (arguments.length < 2) {
                return b
            } else {
                return ICE.$add.apply(null, arguments)
            }
            return b
        },
        $addAfter: function(b, a) {
            a.parentNode.insertBefore(b, a.nextSibling);
            return b
        },
        $addBefore: function(b, a) {
            a.parentNode.insertBefore(b, a);
            return b
        },
        $clean: function(a) {
            if (a && a.nodeType == 1) {
                if (a.reuseable) {
                    return true
                }
                ElementStore.remove(a);
                ICE.$map(ICE.$AF(a.getElementsByTagName("*")), function(b) {
                    if (b && !b.reuseable) {
                        ElementStore.remove(b)
                    }
                })
            }
        },
        $swap: function(a, c) {
            a = ICE.$(a);
            ICE.$clean(a);
            var b = a.parentNode;
            if (c) {
                c = ICE.$get(c);
                b.replaceChild(c, a)
            } else {
                b.removeChild(a)
            }
            return c
        },
        $remove: function() {
            var a = ICE.$arrayFlatten(arguments);
            try {
                ICE.$map(a, function(c) {
                    if ($(c)) {
                        ICE.$swap(c, null)
                    }
                })
            } catch (b) {}
        },
        $create: function(b, l) {
            var e = 0,
                f;
            var g = document.createElement(b);
            var a = l[0];
            if (ICE.$isDict(l[e])) {
                for (var c in a) {
                    f = a[c];
                    switch (c) {
                        case "style":
                        case "s":
                            g.style.cssText = f;
                            break;
                        case "c":
                        case "class":
                        case "className":
                            g.className = f;
                            break;
                        case "reuseable":
                            g.reuseable = true;
                            break;
                        default:
                            g.setAttribute(c, f)
                    }
                }
                e++
            }
            if (a === null) {
                e = 1
            }
            for (var d = e; d < l.length; d++) {
                f = l[d];
                if (f) {
                    var h = typeof(f);
                    if (h == "string" || h == "number") {
                        f = document.createTextNode(f)
                    }
                    g.appendChild(f)
                }
            }
            return g
        },
        $setHTML: function() {
            var a = ICE.$arrayFlatten(arguments);
            var b = a.pop();
            ICE.$map(a, function(c) {
                if (c) {
                    c.innerHTML = b
                }
            });
            return a[0]
        },
        $xssStrip: function(a) {
            if (a) {
                a = a.replace(/<[^>]+>/g, "");
                return a.replace(/[<>"=]/g, " ")
            } else {
                return a
            }
        },
        _createDomShortcuts: function() {
            var b = ["ul", "li", "td", "tr", "th", "tbody", "table", "input", "span", "b", "a", "div", "img", "button", "h1", "h2", "h3", "h4", "h5", "h6", "br", "textarea", "form", "p", "select", "option", "optgroup", "iframe", "script", "center", "dl", "dt", "dd", "small", "pre", "i", "label", "thead", "hr"];
            var a = function(c) {
                ICE[c.toUpperCase()] = function() {
                    return ICE.$create.apply(null, [c, arguments])
                }
            };
            ICE["$map"](b, a);
            ICE.TN = function(c) {
                return document.createTextNode(c)
            }
        },
        $setVisibility: function() {
            var a = ICE.$arrayFlatten(arguments);
            var b = a.pop() && "visible" || "hidden";
            ICE.$setStyle(a, "visibility", b)
        },
        $setOpacity: function(d, c) {
            var b = ICE.$arrayFlatten(arguments);
            var a = b.pop();
            ICE.$map(b, function(e) {
                if (a == 1) {
                    e.style.opacity = 1;
                    e.style.filter = ""
                } else {
                    e.style.opacity = a;
                    e.style.filter = "alpha(opacity=" + a * 100 + ")"
                }
            })
        },
        $show: function() {
            ICE.$setStyle(ICE.$arrayFlatten(arguments), "display", "")
        },
        $hide: function(a) {
            ICE.$setStyle(ICE.$arrayFlatten(arguments), "display", "none")
        },
        $isHidden: function(a) {
            if (!a) {
                return false
            }
            return ((a.style.display == "none") || (a.style.visibility == "hidden"))
        },
        $isShown: function(a) {
            if (!a) {
                return false
            }
            return !ICE.$isHidden(a)
        },
        $setStyle: function() {
            var b = ICE.$arrayFlatten(arguments);
            if (b.length === 0 || b.length == 1) {
                return
            }
            var d = b.pop();
            var a = ["top", "left", "right", "width", "height"];
            if (ICE.$isObject(d)) {
                ICE.$map(b, function(e) {
                    if (e) {
                        ICE.$map(ICE.$keys(d), function(g) {
                            var f = d[g];
                            if (ICE.$isIn(g, a)) {
                                f = ICE.$isString(f) && f || f + "px"
                            }
                            e.style[g] = f
                        })
                    }
                })
            } else {
                var c = b.pop();
                ICE.$map(b, function(e) {
                    if (e) {
                        if (ICE.$isIn(c, a)) {
                            d = ICE.$isString(d) && d || d + "px"
                        }
                        e.style[c] = d
                    }
                })
            }
        },
        $getStyle: function(c, b) {
            var a;
            if (c.currentStyle) {
                a = c.currentStyle
            } else {
                a = document.defaultView.getComputedStyle(c, null)
            }
            return a[b]
        },
        $setWidth: function() {
            return ICE.__cssDim(arguments, "width")
        },
        $setHeight: function() {
            return ICE.__cssDim(arguments, "height")
        },
        $setLeft: function() {
            return ICE.__cssDim(arguments, "left")
        },
        $setRight: function() {
            return ICE.__cssDim(arguments, "right")
        },
        $setTop: function() {
            return ICE.__cssDim(arguments, "top")
        },
        $setBottom: function() {
            return ICE.__cssDim(arguments, "top")
        },
        $setClass: function() {
            var a = ICE.$arrayFlatten(arguments);
            var b = a.pop();
            ICE.$map(a, function(c) {
                c.className = b
            })
        },
        $addClass: function() {
            var b = ICE.$arrayFlatten(arguments);
            var a = b.pop();
            var c = function(e) {
                if (e) {
                    var d = e && e.className;
                    if (d == a) {
                        return
                    }
                    if (!ICE.$hasClass(e, a)) {
                        e.className += (e.className ? " " : "") + a
                    }
                }
            };
            ICE.$map(b, function(d) {
                if (d && d.classList && a.indexOf(" ") == -1) {
                    d.classList.add(a)
                } else {
                    c(d)
                }
            })
        },
        $removeClass: function() {
            var c = ICE.$arrayFlatten(arguments);
            var a = c.pop();
            var b = function(d) {
                if (d) {
                    if (d.className == a) {
                        d.className = ""
                    } else {
                        d.className = d.className.replace(new RegExp("(^|\\s)" + a + "(?:\\s|$)"), "$1")
                    }
                }
            };
            ICE.$map(c, function(d) {
                if (d && d.classList && a.indexOf(" ") == -1) {
                    d.classList.remove(a)
                } else {
                    b(d)
                }
            })
        },
        $replaceClass: function() {
            var b = ICE.$arrayFlatten(arguments);
            var c = b.pop();
            var a = b.pop();
            ICE.$removeClass(b, a);
            ICE.$addClass(b, c)
        },
        $hasClass: function(d, a) {
            if (!d || !d.className) {
                return false
            }
            if (d.classList && a.indexOf(" ") == -1) {
                return d.classList.contains(a)
            }
            var b = d.className;
            if (b == a) {
                return true
            }
            if (b.indexOf(a + " ") === 0) {
                return true
            }
            if (b.indexOf(" " + a + " ") != -1) {
                return true
            }
            var c = b.indexOf(" " + a);
            if (c != -1 && c == b.length - a.length - 1) {
                return true
            }
            return false
        },
        __cssDim: function(a, b) {
            a = ICE.$AF(a);
            a.splice(a.length - 1, 0, b);
            ICE.$setStyle.apply(null, a)
        },
        $mousePos: function(b) {
            var a = 0;
            var c = 0;
            if (!b) {
                b = window.event
            }
            if (b.pageX || b.pageY) {
                a = b.pageX;
                c = b.pageY
            } else {
                if (b.clientX || b.clientY) {
                    a = b.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                    c = b.clientY + document.body.scrollTop + document.documentElement.scrollTop
                }
            }
            return {
                x: a,
                y: c
            }
        },
        $scrollTop: function(a) {
            if (!a) {
                if (document.documentElement && document.documentElement.scrollTop) {
                    a = document.documentElement
                } else {
                    a = document.body
                }
            }
            return a && a.scrollTop || 0
        },
        $position: function(c) {
            if (!c) {
                return {
                    x: 0,
                    y: 0
                }
            }
            if (c.scrollLeft) {
                return {
                    x: c.scrollLeft,
                    y: c.scrollTop
                }
            } else {
                if (c.clientX) {
                    return {
                        x: c.clientX,
                        y: c.clientY
                    }
                }
            }
            var b = {
                x: c.offsetLeft,
                y: c.offsetTop
            };
            if (c.offsetParent) {
                var a = c.offsetParent;
                while (a) {
                    b.x += a.offsetLeft;
                    b.y += a.offsetTop;
                    a = a.offsetParent
                }
            }
            if (ICE.$isSafari() && c.style.position == "absolute") {
                b.x -= document.body.offsetLeft;
                b.y -= document.body.offsetTop
            }
            return b
        },
        $docSize: function(d) {
            var c = d || document;
            var a = Math.max(Math.max(c.body.scrollHeight, c.documentElement.scrollHeight), Math.max(c.body.offsetHeight, c.documentElement.offsetHeight), Math.max(c.body.clientHeight, c.documentElement.clientHeight));
            var b = Math.max(Math.max(c.body.scrollWidth, c.documentElement.scrollWidth), Math.max(c.body.offsetWidth, c.documentElement.offsetWidth), Math.max(c.body.clientWidth, c.documentElement.clientWidth));
            return {
                w: b,
                h: a
            }
        },
        $winSize: function(c) {
            c = c || document;
            var b, a;
            if (self.innerHeight) {
                b = self.innerWidth;
                a = self.innerHeight
            } else {
                if (c.documentElement && c.documentElement.clientHeight) {
                    b = c.documentElement.clientWidth;
                    a = c.documentElement.clientHeight
                } else {
                    if (c.body) {
                        b = c.body.clientWidth;
                        a = c.body.clientHeight
                    }
                }
            }
            return {
                w: b,
                h: a
            }
        },
        $isOverlapping: function(f, c) {
            var i = ICE.$position(f);
            var h = ICE.$position(c);
            var k = i.y;
            var m = i.x;
            var e = m + f.offsetWidth;
            var d = k + f.offsetHeight;
            var j = h.y;
            var l = h.x;
            var b = l + c.offsetWidth;
            var a = j + c.offsetHeight;
            var g = function(n) {
                if (n > 0) {
                    return "+"
                } else {
                    if (n < 0) {
                        return "-"
                    } else {
                        return 0
                    }
                }
            };
            if ((g(k - a) != g(d - j)) && (g(m - b) != g(e - l))) {
                return true
            }
            return false
        },
        $request: function(a, c) {
            var b = ICE.$httpReq();
            if (a.match(/^https?:\/\//) === null) {
                if (ICE.BASE_URL !== "") {
                    if (ICE.BASE_URL.lastIndexOf("/") != ICE.BASE_URL.length - 1) {
                        ICE.BASE_URL += "/"
                    }
                    a = ICE.BASE_URL + a
                }
            }
            a = a.replace(/([^:]?)\/\//g, "$1/");
            if (!c) {
                c = "POST"
            }
            return new ICEDeferred(b, c, a)
        },
        $requestJSON: function(a, e) {
            var c = ICE.$request(a, e);
            var b = function(f, d) {
                var g = d.responseText;
                if (g == "Error") {
                    c.errback(d)
                } else {
                    return ICE.$eval(g)
                }
            };
            c.addCallback(b);
            return c
        },
        $httpReq: function() {
            var b = [function() {
                return new XMLHttpRequest()
            }, function() {
                return new ActiveXObject("Msxml2.XMLHTTP")
            }, function() {
                return new ActiveXObject("Microsoft.XMLHTTP")
            }, function() {
                return new ActiveXObject("Msxml2.XMLHTTP.4.0")
            }, function() {
                throw "Browser does not support XMLHttpRequest"
            }];
            for (var a = 0; a < b.length; a++) {
                var c = b[a];
                try {
                    return c()
                } catch (d) {
                    ICE.$log(d)
                }
            }
        },
        $serialize: function(a) {
            return window.JSON.stringify(a)
        },
        $eval: function(a) {
            if (!ICE.$isString(a)) {
                return a
            }
            return window.JSON.parse(a)
        },
        $evalScript: function(html) {
            var script_data = html.match(/<script.*?>((\n|\r|.)*?)<\/script>/g);
            if (script_data !== null) {
                for (var i = 0; i < script_data.length; i++) {
                    var script_only = script_data[i].replace(/<script.*?>/g, "");
                    script_only = script_only.replace(/<\/script>/g, "");
                    eval(script_only)
                }
            }
        },
        $encode: function(b) {
            var c = [];
            for (var a in b) {
                c.push(a + "=" + ICE.$urlencode(b[a]))
            }
            return c.join("&")
        },
        _reprString: function(a) {
            return ('"' + a.replace(/(["\\])/g, "\\$1") + '"').replace(/[\f]/g, "\\f").replace(/[\b]/g, "\\b").replace(/[\n]/g, "\\n").replace(/[\t]/g, "\\t").replace(/[\r]/g, "\\r")
        },
        _reprDate: function(c) {
            var d = c.getUTCFullYear();
            var a = c.getUTCDate();
            var e = c.getUTCMonth() + 1;
            var b = function(f) {
                if (f < 10) {
                    f = "0" + f
                }
                return f
            };
            return '"' + d + "-" + e + "-" + a + "T" + b(c.getUTCHours()) + ":" + b(c.getUTCMinutes()) + ":" + b(c.getUTCSeconds()) + '"'
        },
        $cookie: {
            create: function(c, d, e) {
                var a = null;
                if (e) {
                    var b = new Date();
                    b.setTime(b.getTime() + (e * 24 * 60 * 60 * 1000));
                    a = "; expires=" + b.toGMTString()
                } else {
                    a = ""
                }
                document.cookie = c + "=" + d + a + "; path=/"
            },
            get: function(b) {
                var e = b + "=";
                var a = document.cookie.split(";");
                for (var d = a.length - 1; d >= 0; d--) {
                    var f = a[d];
                    while (f.charAt(0) == " ") {
                        f = f.substring(1, f.length)
                    }
                    if (f.indexOf(e) == 0) {
                        return f.substring(e.length, f.length)
                    }
                }
                return null
            },
            erase: function(a) {
                ICE.$cookie.create(a, "", -1)
            }
        },
        _bindReady: function() {
            if (ICE._ready_bound) {
                return
            }
            ICE._ready_bound = true;
            if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", function() {
                    document.removeEventListener("DOMContentLoaded", arguments.callee, false);
                    ICE._ready()
                }, false)
            } else {
                if (document.attachEvent) {
                    document.attachEvent("onreadystatechange", function() {
                        if (document.readyState === "complete") {
                            document.detachEvent("onreadystatechange", arguments.callee);
                            ICE._ready()
                        }
                    });
                    if (document.documentElement.doScroll && window == window.top) {
                        (function() {
                            if (ICE._is_ready) {
                                return
                            }
                            try {
                                document.documentElement.doScroll("left")
                            } catch (a) {
                                setTimeout(arguments.callee, 0);
                                return
                            }
                            ICE._ready()
                        })()
                    }
                }
            }
            ICE.$AEV(window, "load", ICE._ready)
        },
        _ready: function(a) {
            if (ICE._is_ready) {
                return
            }
            ICE._is_ready = true;
            ICE.$map(ICE._ready_list, function(b) {
                b.call(window)
            });
            ICE._ready_list = []
        },
        $eventElm: function(b) {
            if (b && !b.type && !b.keyCode) {
                return b
            }
            var a;
            if (!b) {
                b = window.event
            }
            if (b.target) {
                a = b.target
            } else {
                if (b.srcElement) {
                    a = b.srcElement
                }
            }
            if (a && a.nodeType == 3) {
                a = a.parentNode
            }
            return a
        },
        $addListener: function(c, a, b, d) {
            c = ICE.$A(c);
            a = ICE.$A(a);
            ICE.$map(c, function(f) {
                if (d) {
                    b.listen_once = true
                }
                if (!b.$f_guid) {
                    b.$f_guid = ICE._f_guid++
                }
                var e = ElementStore.get(f, "$events");
                if (!e) {
                    e = ElementStore.set(f, "$events", {})
                }
                ICE.$map(a, function(h) {
                    var g = e[h];
                    if (f == window && h == "load") {
                        ICE._ready_list.push(b)
                    } else {
                        if (h == "lazy_load") {
                            h = "load"
                        }
                        if (!g) {
                            g = e[h] = {};
                            if (f["on" + h]) {
                                g[1] = f["on" + h]
                            }
                        }
                        g[b.$f_guid] = b;
                        f["on" + h] = ICE._handleEvent
                    }
                });
                f = null
            })
        },
        _handleEvent: function(h) {
            var g = this;
            h = h || window.event;
            if (!h) {
                return
            }
            if (!h.ctrl) {
                ICE._setEventKey(h)
            }
            var e = ElementStore.get(this, "$events");
            if (!e) {
                return
            }
            var b = e[h.type];
            var a = [];
            var d = true;
            for (var c in b) {
                var f = b[c];
                if (f == ICE._handleEvent) {
                    continue
                }
                d = f.apply(g, [h]);
                if (f.listen_once) {
                    a.push(f)
                }
            }
            if (a.length > 0) {
                ICE.$map(a, function(i) {
                    delete b[i.$f_guid]
                })
            }
            return d
        },
        $removeListener: function(c, b, a) {
            c = ICE.$A(c);
            ICE.$map(c, function(e) {
                var d = ElementStore.get(e, "$events");
                if (d && d[b]) {
                    delete d[b][a.$f_guid]
                }
            })
        },
        $removeAllListeners: function(b, a) {
            b = ICE.$A(b);
            ICE.$map(b, function(d) {
                var c = ElementStore.get(d, "$events");
                if (c && c[a]) {
                    delete c[a]
                }
            })
        },
        $preventDefault: function(a) {
            a = a || window.event;
            if (!a) {
                return
            }
            if (ICE.$isIe()) {
                a.returnValue = false
            } else {
                a.preventDefault()
            }
        },
        $stopPropagation: function(a) {
            a = a || window.event;
            if (ICE.$isIe()) {
                a.cancelBubble = true
            } else {
                a.stopPropagation()
            }
        },
        $bind: function(b, a, c) {
            b._cscope = a;
            return ICE._getRealScope(b, c)
        },
        $bindMethods: function(b) {
            for (var a in b) {
                var c = b[a];
                if (typeof(c) == "function") {
                    b[a] = ICE.$bind(c, b)
                }
            }
        },
        _setEventKey: function(a) {
            if (!a) {
                a = window.event
            }
            var b;
            if (a.keyCode) {
                b = a.keyCode
            } else {
                b = a.charCode
            }
            a.keyAscii = a.key = a.keyCode = b;
            a.ctrl = a.ctrlKey;
            if (ICE.$isMac() && a.metaKey) {
                a.ctrl = a.metaKey
            }
            a.alt = a.altKey;
            a.meta = a.metaKey;
            a.shift = a.shiftKey
        },
        _listenOnce: function(d, b, a) {
            var c = function() {
                ICE.$removeListener(d, b, c);
                a(arguments)
            };
            return c
        },
        _getRealScope: function(b, c) {
            c = ICE.$A(c);
            var a = b._cscope || window;
            return function() {
                var d = ICE.$AF(arguments).concat(c);
                return b.apply(a, d)
            }
        },
        $keys: function(a) {
            if (!a) {
                return []
            } else {
                return Object.keys(a)
            }
        },
        $values: function(b) {
            var a = [];
            for (var c in b) {
                a.push(b[c])
            }
            return a
        },
        $urlencode: function(a) {
            return encodeURIComponent(ICE.$defined(a) && a.toString() || "")
        },
        $urldecode: function(a) {
            return decodeURIComponent(ICE.$defined(a) && a.toString() || "")
        },
        $urlparse: function(b) {
            var c = /^(?:([^:\/?\#]+):)?(?:\/\/([^\/?\#]*))?([^?\#]*)(?:\?([^\#]*))?(?:\#(.*))?/,
                a = (ICE.$defined(b) && b.toString() || "").match(c);
            return {
                scheme: a[1],
                netloc: a[2],
                path: a[3],
                params: a[4],
                query: a[5],
                fragment: a[6]
            }
        },
        $defined: function(a) {
            return (a != "undefined" && a != null)
        },
        $isArray: function(b) {
            try {
                return b instanceof Array
            } catch (a) {
                return false
            }
        },
        $isString: function(a) {
            return (typeof a == "string")
        },
        $isNumber: function(a) {
            return (typeof a == "number")
        },
        $isObject: function(a) {
            return (typeof a == "object")
        },
        $isFunction: function(a) {
            return (typeof a == "function")
        },
        $isBoolean: function(a) {
            return a === true || a === false
        },
        $isDict: function(b) {
            var a = String(b);
            return a.indexOf(" Object") != -1
        },
        _exportToGlobalScope: function(a) {
            a = a || window;
            for (var b in ICE) {
                if (b.indexOf("_") !== 0 && b != "addEventListener" && b != "fx" && b != "dnd") {
                    a[b] = ICE[b]
                }
            }
        },
        $log: function(b) {
            try {
                if (window._firebug) {
                    window._firebug.log(b)
                } else {
                    if (window.console) {
                        console.log(b)
                    }
                }
            } catch (a) {}
        },
        $strip: function(a) {
            return a.replace(/^\s+/, "").replace(/\s+$/g, "")
        },
        $trim: function(c, a, b) {
            if (c.length > a) {
                return c.substring(0, a) + (b || "...")
            }
            return c
        },
        $escape: function(b) {
            var a = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
                "/": "&#x2F;"
            };
            return String(b).replace(/[&<>"'\/]/g, function(c) {
                return a[c]
            })
        },
        $preload: function() {
            var a = ICE.$AF(arguments);
            ICE.$AEV(window, "load", function() {
                ICE.$map(a, function(c) {
                    var b = new Image();
                    b.src = c
                })
            })
        },
        $hasTouchEnabled: function() {
            if (ICE.cached_touch_device === undefined) {
                var a;
                if (("ontouchstart" in window) || window.DocumentTouch && document instanceof window.DocumentTouch) {
                    a = true
                }
                ICE.cached_touch_device = a
            }
            return ICE.cached_touch_device
        },
        $isTouchDeviceOnly: function() {
            if (ICE._has_mouse) {
                return false
            }
            return ICE.$hasTouchEnabled()
        },
        _parseTagClassName: function(c, b) {
            if (c && c.indexOf(".") != -1) {
                var a = c.split(".");
                c = ICE.$strip(a[0]);
                b = ICE.$strip(a[1])
            }
            return [c, b || null]
        }
    };
    ICE.$ = ICE.$get;
    ICE.$f = ICE.$form;
    ICE.$b = ICE.$bind;
    ICE.$p = ICE.$partial;
    ICE.$gp = ICE.$parent;
    ICE.$gc = ICE.$child;
    ICE.$A = ICE.$arrayCreate;
    ICE.$AF = ICE.$arrayForce;
    ICE.$ATT = ICE.$addToTop;
    ICE.$AEV = ICE.$addListener;
    ICE.$REV = ICE.$removeListener;
    ICE._createDomShortcuts();
    ICE.Class = function(a) {
        var b = function() {
            if (arguments[0] != "no_init") {
                return this.init.apply(this, arguments)
            }
        };
        b.prototype = a;
        ICE.$update(b, ICE.Class.prototype);
        return b
    };
    ICE.Class.prototype = {
        extend: function(b) {
            var c = new this("no_init");
            for (var a in b) {
                var d = c[a];
                var e = b[a];
                if (d && d != e && typeof e == "function") {
                    e = this._parentize(e, d)
                }
                c[a] = e
            }
            return new ICE.Class(c)
        },
        implement: function(a) {
            ICE.$update(this.prototype, a)
        },
        _parentize: function(b, a) {
            return function() {
                this.parent = a;
                return b.apply(this, arguments)
            }
        }
    };
    ICE.fx = {
        _shades: {
            0: "ffffff",
            1: "ffffee",
            2: "ffffdd",
            3: "ffffcc",
            4: "ffffbb",
            5: "ffffaa",
            6: "ffff99"
        },
        highlight: function(d, a, b) {
            if (!d) {
                return
            }
            if (!b) {
                b = ICE.fx._shades
            }
            var c = new ICE.fx.Base(d);
            c.options.duration = 600;
            c.setOptions(a);
            ICE.$update(c, {
                increase: function() {
                    var e = Math.floor(this.now);
                    if (e === 0) {
                        d.style.backgroundColor = ""
                    } else {
                        d.style.backgroundColor = "#" + b[e]
                    }
                }
            });
            return c.custom(6, 0)
        },
        fadeIn: function(c, a) {
            a = a || {};
            if (!a.from) {
                a.from = 0;
                ICE.$setOpacity(c, 0)
            }
            if (!a.to) {
                a.to = 1
            }
            var b = new ICE.fx.Style(c, "opacity", a);
            return b.custom(a.from, a.to)
        },
        fadeOut: function(c, a) {
            a = a || {};
            if (!a.from) {
                a.from = 1
            }
            if (!a.to) {
                a.to = 0
            }
            if (!a.duration) {
                a.duration = 300
            }
            var b = new ICE.fx.Style(c, "opacity", a);
            return b.custom(a.from, a.to)
        },
        setWidth: function(c, a) {
            var b = new ICE.fx.Style(c, "width", a);
            return b.custom(a.from, a.to)
        },
        setHeight: function(c, a) {
            var b = new ICE.fx.Style(c, "height", a);
            return b.custom(a.from, a.to)
        }
    };
    $fx = ICE.fx;
    ICE.fx.Base = new ICE.Class({
        init: function(b, a) {
            this.options = {
                onStart: function() {},
                onComplete: function() {},
                transition: ICE.fx.Transitions.sineInOut,
                duration: 500,
                wait: true,
                fps: 50
            };
            ICE.$update(this.options, a);
            ICE.$bindMethods(this);
            this.elm = b;
            if (b && b._fx_running) {
                b._fx_end = true
            }
        },
        setOptions: function(a) {
            ICE.$update(this.options, a)
        },
        step: function() {
            if (!this.elm) {
                this.clearTimer();
                return
            }
            var a = new Date().getTime();
            if (a < this.time + this.options.duration) {
                this.cTime = a - this.time;
                this.setNow();
                this.elm._fx_running = true
            } else {
                if (this.options.onComplete) {
                    setTimeout($b(this.options.onComplete, this, [this.elm]), 10)
                }
                if (this.elm._fx_end) {
                    delete this.elm._fx_end
                }
                if (this.elm._fx_running) {
                    delete this.elm._fx_running
                }
                this.clearTimer();
                this.now = this.to
            }
            this.increase()
        },
        setNow: function() {
            this.now = this.compute(this.from, this.to)
        },
        compute: function(c, b) {
            var a = b - c;
            return this.options.transition(this.cTime, c, a, this.options.duration)
        },
        clearTimer: function() {
            clearInterval(this.timer);
            this.timer = null;
            return this
        },
        _start: function(b, a) {
            if (!this.options.wait) {
                this.clearTimer()
            }
            if (this.timer) {
                return
            }
            setTimeout($p(this.options.onStart, this.elm), 10);
            this.from = b;
            this.to = a;
            this.time = new Date().getTime();
            this.timer = setInterval(this.step, Math.round(1000 / this.options.fps));
            return this
        },
        custom: function(b, a) {
            return this._start(b, a)
        },
        set: function(a) {
            this.now = a;
            this.increase();
            return this
        },
        setStyle: function(c, a, b) {
            if (this.property == "opacity") {
                ICE.$setOpacity(c, b)
            } else {
                ICE.$setStyle(c, a, b)
            }
        }
    });
    ICE.fx.Style = ICE.fx.Base.extend({
        init: function(c, b, a) {
            this.parent(c);
            this.elm = c;
            this.setOptions(a);
            this.property = b
        },
        increase: function() {
            this.setStyle(this.elm, this.property, this.now)
        }
    });
    ICE.fx.Styles = ICE.fx.Base.extend({
        init: function(b, a) {
            this.parent(b);
            this.elm = ICE.$(b);
            this.setOptions(a);
            this.now = {}
        },
        setNow: function() {
            for (var a in this.from) {
                this.now[a] = this.compute(this.from[a], this.to[a])
            }
        },
        custom: function(b) {
            if (this.timer && this.options.wait) {
                return
            }
            var d = {};
            var c = {};
            for (var a in b) {
                d[a] = b[a][0];
                c[a] = b[a][1]
            }
            return this._start(d, c)
        },
        increase: function() {
            for (var a in this.now) {
                this.setStyle(this.elm, a, this.now[a])
            }
        }
    });
    ICE.fx.Transitions = {
        linear: function(e, a, g, f) {
            return g * e / f + a
        },
        sineInOut: function(e, a, g, f) {
            return -g / 2 * (Math.cos(Math.PI * e / f) - 1) + a
        }
    };
    ICE.fx.scrollToPos = function(a, c, b) {
        (new ICE.fx._scrollToCls()).custom(ICE.$scrollTop(), a)
    };
    ICE.fx.scrollToElm = function(b, a) {
        if (a === undefined) {
            a = 0
        }
        ICE.fx.scrollToPos(ICE.$position(b).y + a)
    };
    ICE.fx._scrollToCls = ICE.fx.Base.extend({
        init: function(c, a) {
            var b = {
                duration: 200
            };
            if (a) {
                ICE.$update(b, a)
            }
            this.elm = c || $body();
            this.parent(this.elm, b)
        },
        increase: function() {
            if (this.elm.scrollTo) {
                this.elm.scrollTo(0, this.now)
            } else {
                this.elm.scrollTop = parseInt(this.now)
            }
        }
    });
    ICE.Drag = ICE.Class({
        current_handler: null,
        current_root: null,
        init: function() {
            ICE.$bindMethods(this)
        },
        dragAble: function(a, b) {
            b = b || {};
            var c = b.handler || a;
            c = ICE.$(c);
            if (c._start_fn) {
                ICE.dnd.removeDragAble(c)
            }
            c._kws = b;
            c._root = ICE.$(a);
            c._start_fn = function(d) {
                ICE.dnd._start(c, d);
                ICE.$preventDefault(d);
                return false
            };
            ICE.$AEV(c, "mousedown", c._start_fn)
        },
        removeDragAble: function(a) {
            if (a._start_fn) {
                ICE.$REV(a, "mousedown", a._start_fn)
            }
        },
        recalculateMarginLeft: function() {
            this.root_margin_left = ICE.$getStyle(this.current_root, "marginLeft") || 0;
            if (this.root_margin_left) {
                this.root_margin_left = parseInt(this.root_margin_left)
            }
        },
        _start: function(b, c) {
            if (this.current_handler) {
                return
            }
            this.current_handler = b;
            var a = this.current_root = b._root;
            this.last_mouse_pos = ICE.$mousePos(c);
            ICE.$setVisibility(a, false);
            this.old_z_index = a.style.zIndex;
            a.style.zIndex = 1000;
            this.recalculateMarginLeft();
            if (b._kws.on_start) {
                b._kws.on_start(c)
            }
            ICE.$setVisibility(a, true);
            ICE.$AEV(document, "mousemove", this._move);
            ICE.$AEV(document, "mouseup", this._end)
        },
        _move: function(j) {
            var m = this.current_handler;
            if (!m) {
                return false
            }
            var k = this.current_root;
            var l = m._kws;
            var h = ICE.dnd.mouse_pos = ICE.$mousePos(j);
            var a = this.last_mouse_pos;
            var g = (h.x - a.x);
            var f = (h.y - a.y);
            var n = ICE.$position(k);
            if (l.position_filter) {
                n = l.position_filter(n)
            }
            f += parseInt(k.style.top) || n.y;
            g += parseInt(k.style.left) || n.x;
            if (l.move_filter) {
                var i = l.move_filter(g, f);
                g = i[0];
                f = i[1]
            }
            if (l.move_x !== false) {
                ICE.$setLeft(k, g)
            }
            if (l.move_y !== false) {
                ICE.$setTop(k, f)
            }
            if (l.on_drag) {
                l.on_drag(g, f, j)
            }
            this.last_mouse_pos = h;
            if (l.scroll_on_overflow !== false) {
                var e = ICE.$scrollTop();
                var d = e + ICE.$winSize().h;
                var b = ICE.$position(k).y;
                var c = k.offsetTop + k.offsetHeight;
                if (b <= e + 70) {
                    window.scrollBy(0, -30)
                } else {
                    if (c >= d - 70) {
                        window.scrollBy(0, 30)
                    }
                }
            }
            ICE.$preventDefault(j);
            return false
        },
        _end: function(c) {
            var a = this.current_root;
            var b = this.current_handler;
            ICE.$REV(document, "mousemove", this._move);
            ICE.$REV(document, "mouseup", this._end);
            if (b._kws.on_end) {
                b._kws.on_end()
            }
            this.current_handler = null;
            this.current_root = null;
            a.style.zIndex = this.old_z_index;
            ICE.$preventDefault(c);
            return false
        }
    });
    ICE.dnd = ICE.$dnd = new ICE.Drag();
    $dnd = ICE.dnd;
    ElementStore = {
        storage_dict: {},
        uuid: 1,
        expando: "ElementStore" + (new Date()).getTime(),
        get: function(b, a) {
            return ElementStore.getStore(b)[a] || null
        },
        set: function(c, a, b) {
            ElementStore.getStore(c)[a] = b;
            return b
        },
        has: function(b, a) {
            return ElementStore.getStore(b)[a] !== undefined
        },
        remove: function(d, b) {
            if (!d) {
                return
            }
            if (b !== undefined) {
                var a = ElementStore.getStore(d);
                if (a[b]) {
                    delete a[b]
                }
            } else {
                var c = d[ElementStore.expando];
                if (c) {
                    delete ElementStore.storage_dict[c];
                    d[ElementStore.expando] = null
                }
            }
        },
        getStore: function(d) {
            var c = ElementStore.expando;
            var a = ElementStore.storage_dict;
            var b = d[c];
            if (!b) {
                b = d[c] = ElementStore.uuid++;
                a[b] = {}
            }
            return a[b]
        }
    };
    ICEDeferred = function(b, c, a) {
        this.callbacks = [];
        this.errbacks = [];
        this.req = b;
        this.http_method = c;
        this.http_url = a
    };
    ICEDeferred.prototype = {
        excCallbackSeq: function(c, e) {
            var d = c.responseText;
            if (ICE.generalCallback) {
                d = generalCallback(c, e, this);
                if (!d) {
                    return
                }
            }
            while (e.length > 0) {
                var b = e.pop();
                var a = b(d, c);
                if (a) {
                    d = a
                } else {
                    if (a === false) {
                        break
                    }
                }
            }
        },
        callback: function() {
            this.excCallbackSeq(this.req, this.callbacks)
        },
        errback: function() {
            if (ICE.generalErrorback) {
                var b = ICE.generalErrorback(this.req, this);
                if (b) {
                    return
                }
            }
            if (this.errbacks.length === 0) {
                var a = this.req.responseText.substring(0, 200);
                if (ICE.$strip(a) && a.indexOf("<html") == -1) {
                    alert("Error encountered:\n" + a)
                }
            }
            this.excCallbackSeq(this.req, this.errbacks)
        },
        addErrback: function(a) {
            this.errbacks.unshift(a)
        },
        addCallback: function(a) {
            this.callbacks.unshift(a)
        },
        abort: function() {
            this.req.abort()
        },
        addCallbacks: function(b, a) {
            if (b) {
                this.addCallback(b)
            }
            if (a) {
                this.addErrback(a)
            }
        },
        _onreadystatechange: function() {
            var b = this.req;
            var f = this;
            if (b.readyState == 4) {
                var a = "";
                try {
                    a = b.status
                } catch (c) {}
                if (a == 200 || a == 304 || b.responseText === null) {
                    this.callback()
                } else {
                    this.errback()
                }
            }
        },
        setCSRFHeader: function() {
            var c = this.req;
            var a = ICE.$urlparse(this.http_url);
            if (!ICE.$defined(a.netloc)) {
                var b = ICE.$cookie.get("csrf");
                if (ICE.$defined(b)) {
                    c.setRequestHeader("X-CSRFToken", b)
                }
            }
        },
        sendReq: function(e, c, f) {
            if (c !== false) {
                c = true
            }
            if (!f) {
                f = "application/x-www-form-urlencoded"
            }
            var d = this.req;
            var b = this.http_method == null ? "GET" : this.http_method;
            var a = this.http_url;
            if (ICE.annotateAjaxData.length > 0) {
                ICE.$map(ICE.annotateAjaxData, function(g) {
                    g(e, a, b)
                })
            }
            if (b == "POST" || b == "PUT") {
                d.open(b, a, c);
                d.onreadystatechange = ICE.$bind(this._onreadystatechange, this);
                d.setRequestHeader("Content-Type", f);
                this.setCSRFHeader();
                if (ICE.$isObject(e)) {
                    d.send(ICE.$encode(e))
                } else {
                    if (ICE.$defined(e)) {
                        d.send(e)
                    } else {
                        d.send("")
                    }
                }
            } else {
                d.open(b, a, c);
                d.onreadystatechange = ICE.$bind(this._onreadystatechange, this);
                d.send(null)
            }
        }
    };
    if (window.ICE_EXPORT_TO_SCOPE) {
        ICE._exportToGlobalScope(ICE_EXPORT_TO_SCOPE)
    }
    ICE._bindReady();
    ICE.onMouseMove = function() {
        ICE.$REV(document, "mousemove", ICE.onMouseMove);
        ICE._has_mouse = true
    };
    ICE.$AEV(document, "mousemove", ICE.onMouseMove)
}
var babel = new function() {
    var b = function(d) {
        return d == 1 ? 0 : 1
    };
    var c = /%?%(?:\(([^\)]+)\))?([disr])/g;
    var a = this.Translations = function(d, e) {
        this.messages = {};
        this.locale = d || "unknown";
        this.domain = e || "messages";
        this.pluralexpr = b
    };
    a.load = function(d) {
        var e = new a();
        if (d) {
            e.load(d)
        }
        return e
    };
    a.prototype = {
        gettext: function(e) {
            var f = this.messages[e];
            if (typeof f == "undefined") {
                return e
            }
            var d = (typeof f == "string") ? f : f[0];
            if (!d) {
                return e
            }
            return d
        },
        ngettext: function(e, d, g) {
            var f = this.messages[e];
            if (typeof f == "undefined") {
                return (g == 1) ? e : d
            }
            return f[this.pluralexpr(g)]
        },
        install: function() {
            var d = this;
            window._ = window.gettext = function(e) {
                return d.gettext(e)
            };
            window.ngettext = function(f, e, g) {
                return d.ngettext(f, e, g)
            };
            window.format = babel.format;
            return this
        },
        load: function(d) {
            if (d.messages) {
                this.update(d.messages)
            }
            if (d.plural_expr) {
                this.setPluralExpr(d.plural_expr)
            }
            if (d.locale) {
                this.locale = d.locale
            }
            if (d.domain) {
                this.domain = d.domain
            }
            return this
        },
        update: function(d) {
            for (var e in d) {
                if (d.hasOwnProperty(e)) {
                    this.messages[e] = d[e]
                }
            }
            return this
        },
        setPluralExpr: function(d) {
            this.pluralexpr = new Function("n", "return +(" + d + ")");
            return this
        }
    };
    this.format = function() {
        var e, f = arguments[0],
            d = 0;
        if (arguments.length == 1) {
            return f
        } else {
            if (arguments.length == 2 && typeof arguments[1] == "object") {
                e = arguments[1]
            } else {
                e = [];
                for (var g = 1, h = arguments.length; g != h; ++g) {
                    e[g - 1] = arguments[g]
                }
            }
        }
        return f.replace(c, function(k, i, j) {
            if (k[0] == k[1]) {
                return k.substring(1)
            }
            var l = e[i || d++];
            return (j == "i" || j == "d") ? +l : l
        })
    }
};
if (window.BABEL_TO_LOAD) {
    babel.Translations.load(window.BABEL_TO_LOAD).install()
} else {
    babel.Translations.load(null).install()
}
var WaitingFor = {};
var Indicator = {
    cssSpinner: function(a) {
        if (!a) {
            a = "small"
        }
        return DIV({
            c: "spinner spinner--" + a
        }, DIV({
            c: "bounce1"
        }), DIV({
            c: "bounce2"
        }), DIV({
            c: "bounce3"
        }))
    },
    imgSmall: function() {
        return IMG({
            src: "https://d3ptyyxy2at9ui.cloudfront.net/fb947b5107ee9a4cbb1a7299459d46ae.gif",
            c: "indicator",
            width: 16,
            height: 11
        })
    },
    imgMedium: function() {
        return IMG({
            src: "https://d3ptyyxy2at9ui.cloudfront.net/d465d1716a3460734581967d428fb4ce.gif",
            c: "indicator"
        })
    },
    imgBig: function() {
        return IMG({
            src: "https://d3ptyyxy2at9ui.cloudfront.net/d465d1716a3460734581967d428fb4ce.gif",
            c: "indicator"
        })
    },
    indicatorImg: function() {
        return IMG({
            src: "https://d3ptyyxy2at9ui.cloudfront.net/fb947b5107ee9a4cbb1a7299459d46ae.gif",
            c: "indicator_img"
        })
    },
    addToElm: function(a) {
        $add(a, Indicator.cssSpinner())
    },
    removeFromElm: function(b) {
        var a = $child(b, null, "spinner");
        if (a) {
            $remove(a)
        }
    }
};
var GSignals, __bind = function(a, b) {
    return function() {
        return a.apply(b, arguments)
    }
};
GSignals = (function() {
    function a() {
        this.revokeDelayedSignal = __bind(this.revokeDelayedSignal, this);
        this.sendSignal = __bind(this.sendSignal, this);
        this.disconnect = __bind(this.disconnect, this);
        this.delayedConnect = __bind(this.delayedConnect, this);
        this.connect = __bind(this.connect, this);
        this.getDelayedListeners = __bind(this.getDelayedListeners, this);
        this.getListeners = __bind(this.getListeners, this)
    }
    a.prototype._callbacks = {};
    a.prototype._delayedCallbacks = {};
    a.prototype.getListeners = function(b) {
        return this._callbacks[b] || []
    };
    a.prototype.getDelayedListeners = function(b) {
        return this._delayedCallbacks[b] || []
    };
    a.prototype.connect = function(c, h) {
        var e, d, g, b, f;
        f = c.split(" ");
        for (g = 0, b = f.length; g < b; g++) {
            d = f[g];
            e = this._callbacks[d];
            if (!e) {
                e = this._callbacks[d] = []
            }
            e.push(h)
        }
        return h
    };
    a.prototype.delayedConnect = function(d, j, g) {
        var b, h, c, e, i, f;
        b = {
            cb: j,
            delay: g,
            timer: null
        };
        f = d.split(" ");
        for (e = 0, i = f.length; e < i; e++) {
            c = f[e];
            h = this._delayedCallbacks[c];
            if (!h) {
                h = this._delayedCallbacks[c] = []
            }
            h.push(b)
        }
        return b
    };
    a.prototype.disconnect = function(c, i) {
        var f, d, e, h, b, g;
        if (c === "all") {
            this._callbacks = {}
        } else {
            g = c.split(" ");
            for (h = 0, b = g.length; h < b; h++) {
                e = g[h];
                f = this.getListeners(e);
                d = $index(i, f);
                if (d !== -1) {
                    f.splice(d, 1)
                }
            }
        }
        return i
    };
    a.prototype.sendSignal = function() {
        var m, n, e, k, d, g, i, j, h, f, l, c, b;
        m = $arrayForce(arguments);
        if (m.length < 1) {
            return false
        }
        i = m.shift();
        i = i.split(" ");
        i.push("all");
        for (j = 0, l = i.length; j < l; j++) {
            g = i[j];
            k = this.getListeners(g);
            for (h = 0, c = k.length; h < c; h++) {
                n = k[h];
                if ($isFunction(n)) {
                    n.apply(this, m)
                }
            }
            e = this.getDelayedListeners(g);
            for (f = 0, b = e.length; f < b; f++) {
                d = e[f];
                if (d.timer) {
                    clearTimeout(d.timer)
                }
                d.timer = setTimeout((function(o) {
                    return function() {
                        if ($isFunction(d.cb)) {
                            d.cb.apply(o, m)
                        }
                        return d.timer = null
                    }
                })(this), d.delay)
            }
        }
        return true
    };
    a.prototype.revokeDelayedSignal = function(e) {
        var d, f, g, h, c, b;
        e = e.split(" ");
        b = [];
        for (h = 0, c = e.length; h < c; h++) {
            g = e[h];
            d = this.getDelayedListeners(g);
            b.push((function() {
                var k, i, j;
                j = [];
                for (k = 0, i = d.length; k < i; k++) {
                    f = d[k];
                    if (f.timer) {
                        j.push(clearTimeout(f.timer))
                    } else {
                        j.push(void 0)
                    }
                }
                return j
            })())
        }
        return b
    };
    return a
})();
window.Signals = new GSignals();
window.track = function(c, d, f, b, a) {
    var e;
    if (window.ga) {
        return window.ga("send", "event", c, d, b, b)
    } else {
        e = window._gaq;
        if (e) {
            return e.push(["_trackEvent", c, d, f, b, a])
        }
    }
};
$AEV(window, "load", function() {
    var d, e, a, c, b;
    if (!window.ga) {
        return
    }
    d = window.location.hash;
    b = [null, null, null], c = b[0], a = b[1], e = b[2];
    if (d.indexOf("utm_source") !== -1) {
        c = d.match(/utm_source=([^&]+)/)[1];
        d = d.replace(/utm_source=([^&]+)&?/, "")
    }
    if (d.indexOf("utm_medium") !== -1) {
        a = d.match(/utm_medium=([^&]+)/)[1];
        d = d.replace(/utm_medium=([^&]+)&?/, "")
    }
    if (d.indexOf("utm_campaign") !== -1) {
        e = d.match(/utm_campaign=([^&]+)/)[1];
        d = d.replace(/utm_campaign=([^&]+)&?/, "")
    }
    if (c && a && e) {
        ga("set", "campaignSource", c);
        ga("set", "campaignMedium", a);
        ga("set", "campaignName", e);
        return window.location.hash = d
    }
});
ICE.BASE_URL = "/";
window.$static_path = function(a) {
    return a
};
window.getOfflineMessage = function(a) {
    if (a.status === 0) {
        return _("You appear to be offline and this action requires that you are online.")
    } else {
        return _("You appear to be offline or Todoist is down. This action requires that you are online. Please try again later.")
    }
};
ICE.generalErrorback = function(d, a) {
    var c = window.oldAlert || window.alert;
    var e = d.responseText;
    if ($isString(e) && e.toLowerCase().indexOf("user not logged in") != -1) {
        c(_("You are not logged in. You will be taken to the login page."));
        var b = "/";
        if (window.IS_MINI) {
            b += "?mini=1"
        }
        window.location = b;
        return true
    }
    if (a.offline_message && (d.status === 0 || d.status == 502)) {
        alert(window.getOfflineMessage(d))
    }
};
var SPLITTERS, apply_conversion_rules, convert_to_re, exports_obj, extend_and_convert_string, generic_numeric_preporcessor, get_splitters_and_conversion_rules, isSpaceless, is_empty, normalized_split, parse_csv_line, postprocess_string, preprocess_labels, preprocess_string_by_rule_names, preprocess_string_months, preprocess_string_numeric, preprocess_string_weekdays, preprocess_string_year, reset_conversion_rules_cache, str_trim, translate_to_english, translate_to_lang, _conversion_rules_cache, __indexOf = [].indexOf || function(c) {
    for (var b = 0, a = this.length; b < a; b++) {
        if (b in this && this[b] === c) {
            return b
        }
    }
    return -1
};
str_trim = function(a) {
    return a.replace(/^\s+|\s+$/g, "")
};
is_empty = function(c) {
    var b, a;
    if (c == null) {
        return true
    }
    if (c.length && c.length > 0) {
        return false
    }
    if (c.length && c.length === 0) {
        return true
    }
    b = Object.prototype.hasOwnProperty;
    for (a in c) {
        if (b.call(c, a)) {
            return false
        }
    }
    return true
};
SPLITTERS = ["starting", "at"];
translate_to_english = function(b, d, c) {
    var f, j, k, a, g, e, h;
    a = "lang";
    g = "english";
    if (d === "ja" || d === "ko" || d.indexOf("zh") === 0) {
        k = "０ １ ２ ３ ４ ５ ６ ７ ８ ９".split(" ");
        f = 0;
        for (e = 0, h = k.length; e < h; e++) {
            j = k[e];
            c = c.replace(j, f);
            f++
        }
    }
    return extend_and_convert_string(b, d, c, a, g)
};
translate_to_lang = function(e, b, a) {
    var c, d;
    c = "english";
    d = "lang";
    return extend_and_convert_string(e, b, a, c, d)
};
extend_and_convert_string = function(c, r, M, y, a) {
    var f, h, b, G, K, A, u, H, C, d, E, w, t, k, z, D, x, e, s, B, j, L, J, I, v, g, F, q, p, o, n, m, l;
    if (!M) {
        return ""
    }
    M = str_trim(M).replace(/[\?]/g, "").replace(/\(\.\.\)/g, "").replace(/\./g, " ");
    k = /^[0-9:,\.-/\s\+mh]+(am|pm)?$/i;
    if (k.test(M)) {
        return M
    }
    e = get_splitters_and_conversion_rules(c, r);
    h = e.splitters.at;
    if (h) {
        f = h[y]["substring_pattern"];
        D = function(O, N, i) {
            if (N.indexOf("@") !== -1 || N.match(f)) {
                return O
            } else {
                return N + " @ " + i
            }
        };
        H = h[y]["full"].length;
        if (H > 1) {
            H -= 1
        }
        w = ["."];
        for (K = L = 0, F = H - 1; 0 <= F ? L <= F : L >= F; K = 0 <= F ? ++L : --L) {
            w.push("[^\\s]")
        }
        w = "(" + w.join("") + ")";
        t = new RegExp(w + "\\s*(\\d+:\\d+|(?:\\d+:?\\d*(?:pm|am)))", "i");
        M = M.replace(t, D)
    }
    q = e.splitters_keys;
    for (J = 0, v = q.length; J < v; J++) {
        u = q[J];
        s = e.splitters[u];
        d = s[y].substring_pattern;
        G = normalized_split(M, d);
        if (G.length > 1) {
            j = true;
            z = /^\s*[0-9:]+/i;
            if (s.id === "at" && !z.test(G[1])) {
                j = false
            }
            if (j) {
                C = [];
                for (I = 0, g = G.length; I < g; I++) {
                    b = G[I];
                    C.push(extend_and_convert_string(c, r, b, y, a))
                }
                A = " " + s[a].full + " ";
                return str_trim(C.join(A))
            }
        }
    }
    E = {};
    B = [M];
    p = preprocess_labels(B, E), B = p[0], E = p[1];
    o = preprocess_string_weekdays(B, E, e, y, a, r), B = o[0], E = o[1];
    n = preprocess_string_months(B, E, e, y, a, r), B = n[0], E = n[1];
    m = preprocess_string_year(B, E, e, y, a, r), B = m[0], E = m[1];
    x = apply_conversion_rules(e, B, y, a);
    if (x == null) {
        l = preprocess_string_numeric(B, E), B = l[0], E = l[1];
        x = apply_conversion_rules(e, B, y, a)
    }
    if (x == null) {
        if (isSpaceless(r)) {
            x = B.join("")
        } else {
            x = B.join(" ")
        }
    }
    x = postprocess_string(x, E);
    x = str_trim(x).replace(/\s\s+/g, " ");
    if (x.replace(/\s+/g, "") === M.replace(/\s+/g, "")) {
        return M
    }
    return x
};
apply_conversion_rules = function(l, k, a, f) {
    var b, e, j, g, h, c, i, d;
    b = k.join("");
    d = l.conversion_rules_keys;
    for (c = 0, i = d.length; c < i; c++) {
        j = d[c];
        h = l.conversion_rules[j];
        e = h[f].full;
        g = h[a].exact_pattern;
        if (g.test(b)) {
            return e
        }
    }
    return null
};
_conversion_rules_cache = {};
reset_conversion_rules_cache = function() {
    return _conversion_rules_cache = {}
};
get_splitters_and_conversion_rules = function(d, e) {
    var a, c, j, k, g, l, h, b, f, i;
    a = _conversion_rules_cache[e];
    if (a) {
        return a
    }
    b = [];
    j = [];
    h = {};
    c = {};
    for (f = 0, i = d.length; f < i; f++) {
        k = d[f];
        g = parse_csv_line(k, e);
        if (g == null) {
            continue
        }
        if (g.splitter) {
            h[g.id] = g;
            b.push(g.id)
        } else {
            c[g.id] = g;
            j.push(g.id)
        }
    }
    l = {
        splitters_keys: b,
        splitters: h,
        conversion_rules_keys: j,
        conversion_rules: c
    };
    _conversion_rules_cache[e] = l;
    return l
};
parse_csv_line = function(f, v) {
    var h, d, r, e, g, u, o, a, w, b, q, s, j, p, i, c, l, t, m, n;
    h = "English Full";
    r = "Lang Full";
    d = "English Pattern";
    e = "Lang Pattern";
    n = isSpaceless(v) ? "" : "(?:^|$|\\s|,|;)";
    t = {
        id: null,
        splitter: false,
        english: {
            full: null,
            exact_pattern: null,
            substring_pattern: null
        },
        lang: {
            full: null,
            exact_pattern: null,
            substring_pattern: null
        }
    };
    u = {};
    a = {};
    for (w in f) {
        m = f[w];
        m = str_trim(m);
        if (m === "") {
            continue
        }
        if (w === h) {
            t.id = m;
            t.english.full = m;
            t.splitter = __indexOf.call(SPLITTERS, m) >= 0;
            u[convert_to_re(m)] = 1
        } else {
            if (w === r) {
                t.lang.full = m;
                a[convert_to_re(m)] = 1
            } else {
                if (w.indexOf(d) === 0) {
                    u[convert_to_re(m)] = 1
                } else {
                    if (w.indexOf(e) === 0) {
                        a[convert_to_re(m)] = 1
                    }
                }
            }
        }
    }
    if ((t.id == null) || is_empty(a)) {
        return null
    }
    q = ((function() {
        var k;
        k = [];
        for (o in u) {
            k.push(o)
        }
        return k
    })()).join("|");
    b = "^(?:" + q + ")$";
    i = ((function() {
        var k;
        k = [];
        for (o in a) {
            k.push(o)
        }
        return k
    })()).join("|");
    p = "^(?:" + i + ")$";
    s = [];
    for (g in u) {
        if (g === "@") {
            s.push(g)
        } else {
            s.push("\\b" + g + "\\b")
        }
    }
    j = ((function() {
        var y, x, k;
        k = [];
        for (y = 0, x = s.length; y < x; y++) {
            o = s[y];
            k.push(o)
        }
        return k
    })()).join("|");
    s = "(?:" + j + ")";
    c = [];
    for (g in a) {
        if (g === "@") {
            c.push(g)
        } else {
            c.push("" + n + g + n)
        }
    }
    l = ((function() {
        var y, x, k;
        k = [];
        for (y = 0, x = c.length; y < x; y++) {
            o = c[y];
            k.push(o)
        }
        return k
    })()).join("|");
    c = "(?:" + l + ")";
    t.english.exact_pattern = new RegExp(b, "i");
    t.lang.exact_pattern = new RegExp(p, "i");
    t.english.exact_pattern_src = b;
    t.lang.exact_pattern_src = p;
    t.english.substring_pattern = new RegExp(s, "ig");
    t.lang.substring_pattern = new RegExp(c, "ig");
    t.english.substring_pattern_src = s;
    t.lang.substring_pattern_src = c;
    return t
};
convert_to_re = function(a) {
    a = a.replace(/\(N\)/g, "\\(N\\)").replace(/\(MONTH\)/g, "\\(MONTH\\)").replace(/\(WEEKDAY\)/g, "\\(WEEKDAY\\)").replace(/\(YEAR\)/g, "\\(YEAR\\)").replace(/\(Y\)/g, "\\(Y\\)").replace(/\(\.\.\)/g, "\\S*").replace(/\ /g, "\\s+").replace(/_/g, "\\s*");
    return a
};
preprocess_string_numeric = function(c, a) {
    var b;
    b = /(?:\d+[:.,-/]\d+|\d+)/g;
    return generic_numeric_preporcessor(c, a, "(N)", b)
};
generic_numeric_preporcessor = function(h, m, l, i) {
    var c, d, j, a, g, f, e, k, b;
    d = [];
    for (f = 0, k = h.length; f < k; f++) {
        g = h[f];
        if (g in m) {
            d.push(g);
            continue
        }
        c = g.match(i);
        if (c) {
            c = g.match(i);
            a = normalized_split(g, i);
            for (e = 0, b = a.length; e < b; e++) {
                j = a[e];
                d.push(j);
                d.push(l)
            }
            d.pop();
            m[l] = c
        } else {
            d.push(g)
        }
    }
    return [d, m]
};
preprocess_string_weekdays = function(h, b, g, c, e, a) {
    var d, f;
    f = "(WEEKDAY)";
    d = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
    return preprocess_string_by_rule_names(h, b, g, c, e, f, d, a)
};
preprocess_string_year = function(h, m, l, b, i, e) {
    var a, d, k, c, g, f, j;
    k = "(YEAR)";
    d = [];
    if (!(k in m)) {
        a = m[k] = []
    } else {
        a = m[k]
    }
    c = function(n) {
        a.push(n);
        return k
    };
    for (f = 0, j = h.length; f < j; f++) {
        g = h[f];
        g = g.replace(/\d\d\d\d/g, c);
        d.push(g)
    }
    return [d, m]
};
preprocess_labels = function(h, d) {
    var c, b, f, g, e, a;
    f = /(^|\s+)@([^\s,]+)/g;
    b = [];
    g = function(i) {
        var j;
        j = i.replace(/\d/g, "_");
        d[j] = [i];
        return j
    };
    for (e = 0, a = h.length; e < a; e++) {
        c = h[e];
        c = c.replace(f, g);
        b.push(c)
    }
    return [b, d]
};
preprocess_string_months = function(h, b, g, c, e, a) {
    var d, f;
    f = "(MONTH)";
    d = ["oct", "nov", "dec", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep"];
    return preprocess_string_by_rule_names(h, b, g, c, e, f, d, a)
};
preprocess_string_by_rule_names = function(n, r, l, s, F, g, q, o) {
    var m, v, j, u, x, G, f, z, k, t, y, w, h, p, a, E, e, d, c, b, B, D, C, A;
    if (q.length === 0) {
        k = n
    }
    m = l.conversion_rules;
    p = isSpaceless(o);
    for (e = 0, B = q.length; e < B; e++) {
        G = q[e];
        k = [];
        h = m[G];
        if (h == null) {
            k = n;
            continue
        }
        j = h[F].full;
        w = h[s].substring_pattern;
        for (d = 0, D = n.length; d < D; d++) {
            a = n[d];
            if (a in r) {
                k.push(a);
                continue
            }
            z = a.match(w);
            if (z) {
                y = normalized_split(a, w);
                for (u = c = 0, C = y.length; c < C; u = ++c) {
                    t = y[u];
                    v = RegExp("(^| )$").test(t);
                    x = u === y.length - 1;
                    if (!(p || v || x)) {
                        t += " "
                    }
                    k.push(t);
                    k.push(g);
                    f = z[u];
                    if (f && __indexOf.call(f, ",") >= 0) {
                        k.push(", ")
                    }
                }
                k.pop();
                if (!(g in r)) {
                    r[g] = []
                }
                for (b = 0, A = z.length; b < A; b++) {
                    E = z[b];
                    r[g].push(j)
                }
            } else {
                k.push(a)
            }
        }
        n = k
    }
    return [k, r]
};
postprocess_string = function(c, d) {
    var g, f, b, e, a;
    for (g in d) {
        b = d[g];
        for (e = 0, a = b.length; e < a; e++) {
            f = b[e];
            c = c.replace(g, f)
        }
    }
    return c
};
normalized_split = function(a, b) {
    var c;
    if (a.match(b)) {
        c = a.split(b);
        if (c.length === 0) {
            return ["", ""]
        } else {
            if (c.length === 1) {
                return [c[0], ""]
            } else {
                return c
            }
        }
    }
    return a.split(b)
};
isSpaceless = function(a) {
    if (!a) {
        return false
    }
    if (a.indexOf("zh_") !== -1) {
        return true
    }
    if (a.indexOf("ja") !== -1) {
        return true
    }
    if (a.indexOf("ko") !== -1) {
        return true
    }
    return false
};
if (typeof exports !== "undefined" && exports !== null) {
    exports_obj = exports
} else {
    exports_obj = window
}
exports_obj.translate_to_english = translate_to_english;
exports_obj.translate_to_lang = translate_to_lang;
exports_obj.preprocess_string_numeric = preprocess_string_numeric;
exports_obj.preprocess_string_months = preprocess_string_months;
exports_obj.preprocess_string_weekdays = preprocess_string_weekdays;
exports_obj.get_splitters_and_conversion_rules = get_splitters_and_conversion_rules;
exports_obj.postprocess_string = postprocess_string;
exports_obj.reset_conversion_rules_cache = reset_conversion_rules_cache;